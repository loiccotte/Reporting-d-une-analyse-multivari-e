read.csv("Communes10-20K-Maslow.csv")
read.csv("Communes10-20K-Maslow.csv",sep=";")
head(df)
df=read.csv("Communes10-20K-Maslow.csv",sep=";")
head(df,n=2)
library(FactoMineR)
install.packages("FactoMineR")
install.packages("factoextra")
install.packages("dplyr")
# Ajout des ratios pour 1000 habitants à partir de PTOT
df <- df %>%
mutate(
Ratio_Physiologique = (Physiologique / PTOT) * 1000,
Ratio_Sécurité = (Sécurité / PTOT) * 1000,
Ratio_Appartenance = (Appartenance / PTOT) * 1000,
Ratio_Estime = (Estime / PTOT) * 1000,
Ratio_Actualisation = (Actualisation.de.soi / PTOT) * 1000,
Ratio_Cognitif = (Cognitif / PTOT) * 1000
)
library(FactoMineR)
library(factoextra)
library(dplyr)
# Ajout des ratios pour 1000 habitants à partir de PTOT
df <- df %>%
mutate(
Ratio_Physiologique = (Physiologique / PTOT) * 1000,
Ratio_Sécurité = (Sécurité / PTOT) * 1000,
Ratio_Appartenance = (Appartenance / PTOT) * 1000,
Ratio_Estime = (Estime / PTOT) * 1000,
Ratio_Actualisation = (Actualisation.de.soi / PTOT) * 1000,
Ratio_Cognitif = (Cognitif / PTOT) * 1000
)
View(df)
include=FALSE
# Ajout des ratios pour 1000 habitants à partir de PTOT
df <- df %>%
mutate(
Ratio_Physiologique = (Physiologique / PTOT) * 1000,
Ratio_Sécurité = (Sécurité / PTOT) * 1000,
Ratio_Appartenance = (Appartenance / PTOT) * 1000,
Ratio_Estime = (Estime / PTOT) * 1000,
Ratio_Actualisation = (Actualisation.de.soi / PTOT) * 1000,
Ratio_Cognitif = (Cognitif / PTOT) * 1000
)
acp=PCA(df[,12:-1])
acp=PCA(df[,12:23])
View(acp)
acp=PCA(df[,12:23],scale.unit = TRUE,graph=F)
acp=PCA(df[,12:23],scale.unit = TRUE,graph=F)
res_acp <- PCA(df[,12:23], scale.unit = TRUE, graph = FALSE)
res_acp <- PCA(df[,12:23], scale.unit = TRUE, graph = FALSE)
res_acp <- PCA(df[,12:23], scale.unit = TRUE, graph = FALSE)
setwd("C:/Users/lcotte/Documents/GitHub/Reporting-d-une-analyse-multivari-e/APP")
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    https://shiny.posit.co/
#
df=read.csv("Communes10-20K-Maslow.csv",sep=";")
View(df)
head(df,2)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    https://shiny.posit.co/
#
library(tidygeocoder)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    https://shiny.posit.co/
#
install.packages("tidygeocoder")
library(tidygeocoder)
df=read.csv("Communes10-20K-Maslow.csv",sep=";")
df_geo=df%>%
geocode(commune, postalcode = code_postal, method = "osm", lat = latitude , long = longitude)
df=read.csv("Communes10-20K-Maslow.csv",sep=";")
df_geo=df%>%
geocode(Commune,  method = "osm", lat = latitude , long = longitude)
write.table(df_geo,file="CommunesGeo.csv")
colnames(df_geo)
shiny::runApp()
install.packages("leaflet")
runApp()
View(df_geo)
runApp()
# Exemple de jeu de données
df_geo <- read.csv("Communes10-20K-Maslow.csv", sep = ";", encoding = "UTF-8")
View(df_geo)
runApp()
# Exemple de jeu de données
df_geo <- read.csv("CommunesGeo.csv", sep = ";", encoding = "UTF-8")
# Exemple de jeu de données
df_geo <- read.csv("CommunesGeo.csv", sep = ",", encoding = "UTF-8")
View(df_geo)
# Exemple de jeu de données
df_geo <- read.csv("CommunesGeo.csv", sep = "/n", encoding = "UTF-8")
View(df_geo)
# Exemple de jeu de données
df_geo <- read.csv("CommunesGeo.csv", sep = " ", encoding = "UTF-8")
runApp()
runApp()
runApp()
df_geo <- read.csv("CommunesGeo.csv", sep = " ", encoding = "UTF-8")
library(shiny)
library(leaflet)
library(dplyr)
library(bslib)
# Palette de couleurs par étage
etage_couleurs <- c(
"Physiologique" = "#1f77b4",
"Sécurité" = "#2ca02c",
"Appartenance" = "#d62728",
"Estime" = "#9467bd",
"Actualisation.de.soi" = "#ff7f0e",
"Cognitif" = "#17becf"
)
# UI ----
ui <- fluidPage(
theme = bs_theme(version = 5, bootswatch = "minty"),
titlePanel("Carte des communes - Pyramide de Maslow"),
sidebarLayout(
sidebarPanel(
selectInput("tri", "Trier par :",
choices = c("Aucun", names(etage_couleurs))),
checkboxGroupInput("etages", "Étages à afficher :",
choices = names(etage_couleurs),
selected = names(etage_couleurs)[1]),
width = 3
),
mainPanel(
leafletOutput("carte", height = 700)
)
)
)
# Server ----
server <- function(input, output, session) {
# Chargement et nettoyage des données
df_geo <- read.csv("Communes10-20K-Maslow.csv", sep = ";", encoding = "UTF-8")
colnames(df_geo) <- make.names(colnames(df_geo)) # nommage compatible
data_reactive <- reactive({
df <- df_geo
# Étages sélectionnés
etages_sel <- make.names(input$etages)
# Identifier l'étage dominant
df$etage_dominant <- apply(df[, etages_sel, drop = FALSE], 1, function(row) {
idx <- which.max(row)
input$etages[idx]
})
# Ajouter la couleur correspondante
df$couleur <- etage_couleurs[df$etage_dominant]
# Tri éventuel
if (input$tri != "Aucun") {
df <- df %>% arrange(desc(.data[[make.names(input$tri)]]))
}
df
})
output$carte <- renderLeaflet({
df_geo <- read.csv("CommunesGeo.csv", sep = " ", encoding = "UTF-8")
leaflet(df) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
clearMarkers() %>%
addCircleMarkers(
lng = ~longitude, lat = ~latitude,
radius = 7,
fillColor = ~couleur,
color = "white", weight = 1,
fillOpacity = 0.8,
label = lapply(seq_len(nrow(df)), function(i) {
commune <- df$Commune[i]
scores <- input$etages
texte <- paste0("<b>", commune, "</b><br>")
for (score in scores) {
col <- make.names(score)
texte <- paste0(texte, score, " : ", df[[col]][i], "<br>")
}
texte <- paste0(texte, "<b>Ét. dominant :</b> ", df$etage_dominant[i])
HTML(texte)
}),
labelOptions = labelOptions(direction = "auto")
)
})
}
# Lancer l'application
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(dplyr)
library(bslib)
# Palette de couleurs par étage
etage_couleurs <- c(
"Physiologique" = "#1f77b4",
"Sécurité" = "#2ca02c",
"Appartenance" = "#d62728",
"Estime" = "#9467bd",
"Actualisation.de.soi" = "#ff7f0e",
"Cognitif" = "#17becf"
)
# UI ----
ui <- fluidPage(
theme = bs_theme(version = 5, bootswatch = "minty"),
titlePanel("Carte des communes - Pyramide de Maslow"),
sidebarLayout(
sidebarPanel(
selectInput("tri", "Trier par :",
choices = c("Aucun", names(etage_couleurs))),
checkboxGroupInput("etages", "Étages à afficher :",
choices = names(etage_couleurs),
selected = names(etage_couleurs)[1]),
width = 3
),
mainPanel(
leafletOutput("carte", height = 700)
)
)
)
# Server ----
server <- function(input, output, session) {
# Chargement et nettoyage des données
df_geo <- read.csv("Communes10-20K-Maslow.csv", sep = ";", encoding = "UTF-8")
colnames(df_geo) <- make.names(colnames(df_geo)) # nommage compatible
data_reactive <- reactive({
df <- df_geo
# Étages sélectionnés
etages_sel <- make.names(input$etages)
# Identifier l'étage dominant
df$etage_dominant <- apply(df[, etages_sel, drop = FALSE], 1, function(row) {
idx <- which.max(row)
input$etages[idx]
})
# Ajouter la couleur correspondante
df$couleur <- etage_couleurs[df$etage_dominant]
# Tri éventuel
if (input$tri != "Aucun") {
df <- df %>% arrange(desc(.data[[make.names(input$tri)]]))
}
df
})
output$carte <- renderLeaflet({
df <- data_reactive()
leaflet(df) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
clearMarkers() %>%
addCircleMarkers(
lng = ~longitude, lat = ~latitude,
radius = 7,
fillColor = ~couleur,
color = "white", weight = 1,
fillOpacity = 0.8,
label = lapply(seq_len(nrow(df)), function(i) {
commune <- df$Commune[i]
scores <- input$etages
texte <- paste0("<b>", commune, "</b><br>")
for (score in scores) {
col <- make.names(score)
texte <- paste0(texte, score, " : ", df[[col]][i], "<br>")
}
texte <- paste0(texte, "<b>Ét. dominant :</b> ", df$etage_dominant[i])
HTML(texte)
}),
labelOptions = labelOptions(direction = "auto")
)
})
}
# Lancer l'application
shinyApp(ui, server)
runApp()
runApp()
View(df_geo)
runApp()
#| echo: false
#| include : false
res_acp <- PCA(df[,12:23], scale.unit = TRUE, graph = FALSE)
#| echo: false
#| include : false
df=read.csv("Communes10-20K-Maslow.csv",sep=";")
#| echo: false
#| include : false
res_acp <- PCA(df[,12:23], scale.unit = TRUE, graph = FALSE)
#| echo: false
#| include : false
res_acp <- PCA(df[,12:17], scale.unit = TRUE, graph = FALSE)
fviz_pca_ind(res_acp,
col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
label=FALSE,
repel = TRUE,
title = "ACP - Communes (Individus)")
# Graphique des variables (ratios)
fviz_pca_var(res_acp,
col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,
title = "ACP - Ratios pour 1000 habitants (Variables)")
# Contributions (affichage console)
res_acp$var$contrib  # Contribution des variables aux axes
res_acp$ind$contrib  # Contribution des individus
fviz_pca_ind(res_acp,
col.ind = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
label=TRUE,
repel = TRUE,
title = "ACP - Communes (Individus)")
# Graphique des variables (ratios)
fviz_pca_var(res_acp,
col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,
title = "ACP - Ratios pour 1000 habitants (Variables)")
# Contributions (affichage console)
res_acp$var$contrib  # Contribution des variables aux axes
res_acp$ind$contrib  # Contribution des individus
fviz_pca_ind(res_acp,
col.ind = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,
title = "ACP - Communes (Individus)")
# Graphique des variables (ratios)
fviz_pca_var(res_acp,
col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE,
title = "ACP - Ratios pour 1000 habitants (Variables)")
# Contributions (affichage console)
res_acp$var$contrib  # Contribution des variables aux axes
res_acp$ind$contrib  # Contribution des individus
