tags$style(custom_css)
),
div(class = "search-container",
h1("LoL Profile Analyzer", style = "text-align: center; margin-bottom: 20px;"),
fluidRow(
column(5, textInput("game_name", "Nom de jeu", "")),
column(5, textInput("tag_line", "Tag Line", "")),
column(2, actionButton("search", "Rechercher",
style = "width: 100%; background-color: #007bff; color: white; border: none; padding: 10px; border-radius: 4px;"))
)
),
div(class = "stats-container",
div(class = "stat-card",
h3("Informations du compte"),
verbatimTextOutput("account_info")
),
div(class = "stat-card",
h3("Statistiques globales"),
verbatimTextOutput("global_stats")
)
),
div(id = "match_history", class = "match-history-container")
)
# Serveur
server <- function(input, output, session) {
# Données du compte
account_data <- eventReactive(input$search, {
get_account_by_riot_id(input$game_name, input$tag_line)
})
# Historique des matchs
match_history <- reactive({
data <- account_data()
if (!is.null(data)) {
match_ids <- get_matches(data$puuid)
lapply(match_ids, get_match_detail)
} else {
NULL
}
})
# Informations du compte
output$account_info <- renderPrint({
data <- account_data()
if (!is.null(data)) {
cat("Nom du compte:", data$gameName, "\n")
cat("Tag Line:", data$tagLine, "\n")
cat("PUUID:", data$puuid, "\n")
} else {
cat("Compte non trouvé")
}
})
# Statistiques globales
output$global_stats <- renderPrint({
matches <- match_history()
if (!is.null(matches)) {
wins <- sum(sapply(matches, function(m) m$info$participants[[1]]$win))
total_matches <- length(matches)
cat("Nombre de parties:", total_matches, "\n")
cat("Victoires:", wins, "\n")
cat("Défaites:", total_matches - wins, "\n")
cat("Winrate:", sprintf("%.1f%%", wins/total_matches * 100), "\n")
} else {
cat("Aucune statistique disponible")
}
})
# Rendu des matchs
observe({
matches <- match_history()
if (!is.null(matches)) {
match_html <- lapply(matches, function(match) {
participant <- match$info$participants[[1]]
victory <- participant$win
div(class = paste("match-card", if(victory) "victory" else "defeat"),
div(class = "match-header",
h4(if(victory) "Victoire" else "Défaite"),
p(participant$championName)
),
div(class = "match-stats",
p(sprintf("KDA: %d/%d/%d",
participant$kills, participant$deaths, participant$assists)),
p(sprintf("CS: %d", participant$totalMinionsKilled)),
p(sprintf("Vision: %d", participant$visionScore))
)
)
})
insertUI(
selector = "#match_history",
where = "beforeEnd",
ui = div(match_html)
)
}
})
}
# Lancement de l'application
shinyApp(ui = ui, server = server)
# app.R
library(shiny)
library(httr)
library(dplyr)
library(ggplot2)
library(jsonlite)
library(htmltools)
# Configuration
api_key <- "RGAPI-5c7d8d9a-70c9-4f6f-906a-4691804e3246"
region <- "europe"
# Fonction de logging améliorée
log_debug <- function(message, data = NULL) {
timestamp <- format(Sys.time(), "%Y-%m-%d %H:%M:%S")
cat(sprintf("[DEBUG] %s: %s\n", timestamp, message))
if (!is.null(data)) {
cat("Data structure:\n")
str(data)
cat("\n")
}
}
# Fonctions utilitaires pour l'API
get_account_by_riot_id <- function(game_name, tag_line) {
log_debug("Début get_account_by_riot_id")
url <- sprintf("https://%s.api.riotgames.com/riot/account/v1/accounts/by-riot-id/%s/%s",
region, URLencode(game_name), URLencode(tag_line))
log_debug(sprintf("URL: %s", url))
response <- tryCatch({
GET(url, add_headers(`X-Riot-Token` = api_key))
}, error = function(e) {
log_debug(sprintf("Erreur lors de la requête: %s", e$message))
return(NULL)
})
if (!is.null(response) && status_code(response) == 200) {
content <- fromJSON(rawToChar(response$content))
log_debug("Réponse API compte:", content)
return(content)
}
log_debug("Compte non trouvé")
return(NULL)
}
get_matches <- function(puuid, count = 10) {
log_debug(sprintf("Début get_matches pour PUUID: %s", puuid))
url <- sprintf("https://%s.api.riotgames.com/lol/match/v5/matches/by-puuid/%s/ids?count=%d",
region, puuid, count)
response <- tryCatch({
GET(url, add_headers(`X-Riot-Token` = api_key))
}, error = function(e) {
log_debug(sprintf("Erreur lors de la requête matches: %s", e$message))
return(NULL)
})
if (!is.null(response) && status_code(response) == 200) {
matches <- fromJSON(rawToChar(response$content))
log_debug("Liste des matchs:", matches)
return(matches)
}
return(NULL)
}
get_match_detail <- function(match_id) {
log_debug(sprintf("Début get_match_detail pour match: %s", match_id))
url <- sprintf("https://%s.api.riotgames.com/lol/match/v5/matches/%s",
region, match_id)
response <- tryCatch({
GET(url, add_headers(`X-Riot-Token` = api_key))
}, error = function(e) {
log_debug(sprintf("Erreur lors de la requête match detail: %s", e$message))
return(NULL)
})
if (!is.null(response) && status_code(response) == 200) {
match_data <- fromJSON(rawToChar(response$content))
log_debug("Structure des données match reçues:")
log_debug("", match_data)
return(match_data)
}
return(NULL)
}
# CSS personnalisé (inchangé)
custom_css <- "
.search-container {
max-width: 800px;
margin: 20px auto;
padding: 20px;
background-color: #f8f9fa;
border-radius: 8px;
box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
.match-card {
background-color: white;
border-radius: 8px;
padding: 15px;
margin-bottom: 15px;
box-shadow: 0 2px 4px rgba(0,0,0,0.1);
transition: transform 0.2s;
}
.match-card:hover {
transform: translateY(-2px);
}
.victory {
border-left: 4px solid #4CAF50;
}
.defeat {
border-left: 4px solid #f44336;
}
.stats-container {
display: grid;
grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
gap: 20px;
margin-top: 20px;
}
.stat-card {
background-color: white;
padding: 15px;
border-radius: 8px;
box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
"
# Interface utilisateur
ui <- fluidPage(
tags$head(
tags$style(custom_css)
),
div(class = "search-container",
h1("LoL Profile Analyzer", style = "text-align: center; margin-bottom: 20px;"),
fluidRow(
column(5, textInput("game_name", "Nom de jeu", "")),
column(5, textInput("tag_line", "Tag Line", "")),
column(2, actionButton("search", "Rechercher",
style = "width: 100%; background-color: #007bff; color: white; border: none; padding: 10px; border-radius: 4px;"))
)
),
div(class = "stats-container",
div(class = "stat-card",
h3("Informations du compte"),
verbatimTextOutput("account_info")
),
div(class = "stat-card",
h3("Statistiques globales"),
verbatimTextOutput("global_stats")
)
),
div(id = "match_history", class = "match-history-container")
)
# Serveur
server <- function(input, output, session) {
# Données du compte
account_data <- eventReactive(input$search, {
log_debug("Recherche de compte initiée")
data <- get_account_by_riot_id(input$game_name, input$tag_line)
log_debug("Données du compte reçues:", data)
data
})
# Historique des matchs avec vérification
match_history <- reactive({
log_debug("Début récupération historique des matchs")
data <- account_data()
if (is.null(data)) {
log_debug("Pas de données de compte disponibles")
return(NULL)
}
match_ids <- get_matches(data$puuid)
if (is.null(match_ids)) {
log_debug("Pas d'IDs de match trouvés")
return(NULL)
}
log_debug(sprintf("Récupération des détails pour %d matchs", length(match_ids)))
matches <- lapply(match_ids, function(id) {
match_data <- get_match_detail(id)
if (is.null(match_data)) {
log_debug(sprintf("Échec récupération détails match %s", id))
return(NULL)
}
return(match_data)
})
# Filtrer les matchs NULL
matches <- matches[!sapply(matches, is.null)]
log_debug(sprintf("Nombre de matchs récupérés avec succès: %d", length(matches)))
return(matches)
})
# Informations du compte
output$account_info <- renderPrint({
data <- account_data()
if (!is.null(data)) {
cat("Nom du compte:", data$gameName, "\n")
cat("Tag Line:", data$tagLine, "\n")
cat("PUUID:", data$puuid, "\n")
} else {
cat("Compte non trouvé")
}
})
# Statistiques globales avec vérification
output$global_stats <- renderPrint({
matches <- match_history()
if (!is.null(matches) && length(matches) > 0) {
# Vérifier la structure de chaque match avant d'accéder aux données
wins <- sum(sapply(matches, function(m) {
if (!is.null(m) && !is.null(m$info) && !is.null(m$info$participants)) {
return(m$info$participants[[1]]$win)
}
return(0)
}))
total_matches <- length(matches)
cat("Nombre de parties:", total_matches, "\n")
cat("Victoires:", wins, "\n")
cat("Défaites:", total_matches - wins, "\n")
if (total_matches > 0) {
cat("Winrate:", sprintf("%.1f%%", wins/total_matches * 100), "\n")
}
} else {
cat("Aucune statistique disponible")
}
})
# Rendu des matchs avec vérification
observe({
matches <- match_history()
if (!is.null(matches) && length(matches) > 0) {
match_html <- lapply(matches, function(match) {
if (is.null(match) || is.null(match$info) || is.null(match$info$participants)) {
log_debug("Match invalide détecté")
return(NULL)
}
participant <- match$info$participants[[1]]
victory <- participant$win
div(class = paste("match-card", if(victory) "victory" else "defeat"),
div(class = "match-header",
h4(if(victory) "Victoire" else "Défaite"),
p(participant$championName)
),
div(class = "match-stats",
p(sprintf("KDA: %d/%d/%d",
participant$kills, participant$deaths, participant$assists)),
p(sprintf("CS: %d", participant$totalMinionsKilled)),
p(sprintf("Vision: %d", participant$visionScore))
)
)
})
# Filtrer les éléments NULL
match_html <- match_html[!sapply(match_html, is.null)]
if (length(match_html) > 0) {
insertUI(
selector = "#match_history",
where = "beforeEnd",
ui = div(match_html)
)
}
}
})
}
# Lancement de l'application
shinyApp(ui = ui, server = server)
# Charger les bibliothèques nécessaires
library(shiny)
library(ggplot2)
library(dplyr)
library(shinythemes)
# Définir l'interface utilisateur
ui <- fluidPage(
theme = shinytheme("united"), # Thème moderne
titlePanel("Visualisation des Espèces d'Iris"),
sidebarLayout(
sidebarPanel(
selectInput("xcol", "X-Axis", choices = names(iris)[1:4]),
selectInput("ycol", "Y-Axis", choices = names(iris)[1:4], selected = names(iris)[[2]]),
selectInput("species", "Espèce", choices = unique(iris$Species), multiple = TRUE, selected = unique(iris$Species)),
actionButton("reset", "Réinitialiser")
),
mainPanel(
plotOutput("scatterPlot")
)
)
)
# Définir le serveur
server <- function(input, output, session) {
# Réinitialiser les sélections
observeEvent(input$reset, {
updateSelectInput(session, "xcol", selected = names(iris)[[1]])
updateSelectInput(session, "ycol", selected = names(iris)[[2]])
updateSelectInput(session, "species", selected = unique(iris$Species))
})
# Créer un graphique réactif
output$scatterPlot <- renderPlot({
filteredData <- iris %>% filter(Species %in% input$species)
ggplot(filteredData, aes_string(x = input$xcol, y = input$ycol, color = "Species")) +
geom_point(size = 3, alpha = 0.6) +
theme_minimal() +
labs(title = "Distribution des Espèces d'Iris",
x = input$xcol,
y = input$ycol) +
theme(legend.position = "bottom")
})
}
# Exécuter l'application
shinyApp(ui = ui, server = server)
# Charger les bibliothèques nécessaires
library(shiny)
library(ggplot2)
library(dplyr)
library(shinythemes)
library(DT) # Pour les tableaux interactifs
library(plotly) # Pour les graphiques interactifs
library(leaflet) # Pour les cartes interactives
library(shinydashboard) # Pour un design de tableau de bord
# Exemple de données (vous pouvez remplacer cela par des données récupérées sur le web)
fruits_legumes_fleurs <- data.frame(
Nom = c("Pomme", "Banane", "Carotte", "Tomate", "Poire", "Concombre", "Rose", "Tulipe"),
Type = c("Fruit", "Fruit", "Légume", "Légume", "Fruit", "Légume", "Fleur", "Fleur"),
Calories = c(52, 89, 41, 18, 57, 16, NA, NA),
Proteines = c(0.3, 1.1, 0.9, 0.9, 0.4, 0.7, NA, NA),
Fibres = c(2.4, 2.6, 2.8, 1.2, 3.1, 0.5, NA, NA),
Saison = c("Automne", "Toute l'année", "Été", "Été", "Automne", "Été", "Printemps", "Printemps"),
Prix_Moyen = c(1.5, 0.8, 0.7, 1.2, 1.3, 0.9, 2.0, 1.5)
)
# Définir l'interface utilisateur
ui <- dashboardPage(
dashboardHeader(title = "Exploration des Fruits, Légumes et Fleurs"),
dashboardSidebar(
sidebarMenu(
menuItem("Accueil", tabName = "accueil", icon = icon("home")),
menuItem("Tableau des Données", tabName = "tableau", icon = icon("table")),
menuItem("Graphiques", tabName = "graphiques", icon = icon("chart-line")),
menuItem("Carte", tabName = "carte", icon = icon("globe")),
menuItem("À Propos", tabName = "apropos", icon = icon("info-circle"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "accueil",
h2("Bienvenue sur le site des fruits, légumes et fleurs"),
p("Explorez les données nutritionnelles, les saisons et plus encore !")
),
tabItem(tabName = "tableau",
DTOutput("table")
),
tabItem(tabName = "graphiques",
fluidRow(
column(width = 6,
plotlyOutput("scatterPlot")
),
column(width = 6,
plotlyOutput("barPlot")
)
),
fluidRow(
column(width = 6,
selectInput("type", "Type", choices = c("Fruit", "Légume", "Fleur", "Tous"), selected = "Tous")
),
column(width = 6,
selectInput("xcol", "X-Axis", choices = c("Calories", "Proteines", "Fibres", "Prix_Moyen"), selected = "Calories"),
selectInput("ycol", "Y-Axis", choices = c("Calories", "Proteines", "Fibres", "Prix_Moyen"), selected = "Proteines")
)
)
),
tabItem(tabName = "carte",
leafletOutput("map", height = 500)
),
tabItem(tabName = "apropos",
h2("À propos de ce site"),
p("Ce site a été créé pour explorer les données sur les fruits, légumes et fleurs.")
)
)
)
)
# Définir le serveur
server <- function(input, output, session) {
# Afficher le tableau des données
output$table <- renderDT({
datatable(fruits_legumes_fleurs, options = list(pageLength = 5))
})
# Créer un graphique réactif
output$scatterPlot <- renderPlotly({
filteredData <- fruits_legumes_fleurs
if (input$type != "Tous") {
filteredData <- filteredData %>% filter(Type == input$type)
}
ggplotly(
ggplot(filteredData, aes_string(x = input$xcol, y = input$ycol, color = "Type")) +
geom_point(size = 3, alpha = 0.6) +
theme_minimal() +
labs(title = "Comparaison des Fruits, Légumes et Fleurs",
x = input$xcol,
y = input$ycol) +
theme(legend.position = "bottom")
)
})
# Créer un graphique en barres
output$barPlot <- renderPlotly({
filteredData <- fruits_legumes_fleurs
if (input$type != "Tous") {
filteredData <- filteredData %>% filter(Type == input$type)
}
ggplotly(
ggplot(filteredData, aes_string(x = "Nom", y = input$ycol, fill = "Type")) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Comparaison des Valeurs par Type",
x = "Nom",
y = input$ycol) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
)
})
# Créer une carte interactive
output$map <- renderLeaflet({
leaflet(fruits_legumes_fleurs) %>%
addTiles() %>%
addMarkers(
lng = ~ 2.3522, # Exemple de longitude
lat = ~ 48.8566, # Exemple de latitude
popup = ~ paste(Nom, "<br>", "Type: ", Type, "<br>", "Saison: ", Saison)
)
})
}
# Exécuter l'application
shinyApp(ui = ui, server = server)
elecdf <- read_delim("eCO2mix_RTE_En-cours-Consolide.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
runif(n = 15)
?runif()
shiny::runApp('Reporting-d-une-analyse-multivari-e/APP')
setwd("C:/Users/royky/Desktop/test")
library(shiny); runApp('app2.R')
